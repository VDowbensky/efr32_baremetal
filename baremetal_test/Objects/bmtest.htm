<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Objects\bmtest.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Objects\bmtest.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6160001: Last Updated: Fri Aug  6 11:33:50 2021
<BR><P>
<H3>Maximum Stack Usage =        336 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
__rt_entry_main &rArr; main &rArr; process_cli &rArr; ciProcessInput &rArr; ciPrintHelp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[20]">NMI_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[20]">NMI_Handler</a><BR>
 <LI><a href="#[21]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[21]">HardFault_Handler</a><BR>
 <LI><a href="#[22]">MemManage_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[22]">MemManage_Handler</a><BR>
 <LI><a href="#[23]">BusFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[23]">BusFault_Handler</a><BR>
 <LI><a href="#[24]">UsageFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[24]">UsageFault_Handler</a><BR>
 <LI><a href="#[25]">SVC_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[25]">SVC_Handler</a><BR>
 <LI><a href="#[26]">DebugMon_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[26]">DebugMon_Handler</a><BR>
 <LI><a href="#[28]">PendSV_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[28]">PendSV_Handler</a><BR>
 <LI><a href="#[29]">SysTick_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[29]">SysTick_Handler</a><BR>
 <LI><a href="#[37]">ACMP0_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[37]">ACMP0_IRQHandler</a><BR>
 <LI><a href="#[fc]">USART_Rx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fc]">USART_Rx</a><BR>
 <LI><a href="#[fd]">USART_Tx</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[fd]">USART_Tx</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[37]">ACMP0_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[38]">ADC0_IRQHandler</a> from adc.o(.text.ADC0_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[45]">AGC_IRQHandler</a> from radio.o(.text.AGC_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[31]">BUFC_IRQHandler</a> from radio.o(.text.BUFC_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[23]">BusFault_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[41]">CMU_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[49]">CRYOTIMER_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[43]">CRYPTO_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[26]">DebugMon_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[2a]">EMU_IRQHandler</a> from tempdrv.o(.text.EMU_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[4b]">FPUEH_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[2d]">FRC_IRQHandler</a> from radio.o(.text.FRC_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[2b]">FRC_PRI_IRQHandler</a> from radio.o(.text.FRC_PRI_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[33]">GPIO_EVEN_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[3b]">GPIO_ODD_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[21]">HardFault_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[3a]">I2C0_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[39]">IDAC0_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[32]">LDMA_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[44]">LETIMER0_IRQHandler</a> from adc.o(.text.LETIMER0_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[3f]">LEUART0_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[2e]">MODEM_IRQHandler</a> from radio.o(.text.MODEM_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[42]">MSC_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[22]">MemManage_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[20]">NMI_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[40]">PCNT0_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[46]">PROTIMER_IRQHandler</a> from radio.o(.text.PROTIMER_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[28]">PendSV_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[30]">RAC_RSM_IRQHandler</a> from radio.o(.text.RAC_RSM_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[2f]">RAC_SEQ_IRQHandler</a> from radio.o(.text.RAC_SEQ_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[4a]">RFSENSE_IRQHandler</a> from rfsense.o(.text.RFSENSE_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[47]">RTCC_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[1f]">Reset_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[25]">SVC_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[48]">SYNTH_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[29]">SysTick_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[4c]">SystemInit</a> from system_efr32fg1v.o(.text.SystemInit) referenced from startup_efr32fg1v.o(.text)
 <LI><a href="#[34]">TIMER0_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[3c]">TIMER1_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[35]">USART0_RX_IRQHandler</a> from retargetserial.o(.text.USART0_RX_IRQHandler) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[36]">USART0_TX_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[3d]">USART1_RX_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[3e]">USART1_TX_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[24]">UsageFault_Handler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[2c]">WDOG0_IRQHandler</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
 <LI><a href="#[4d]">__main</a> from __main.o(!!!main) referenced from startup_efr32fg1v.o(.text)
 <LI><a href="#[4e]">_get_lc_ctype</a> from lc_ctype_c.o(locale$$code) referenced from rt_ctype_table.o(.text)
 <LI><a href="#[50]">_printf_input_char</a> from _printf_char_common.o(.text) referenced from _printf_char_common.o(.text)
 <LI><a href="#[10]">cli_calctune</a> from app_cli.o(.text.cli_calctune) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1c]">cli_getber</a> from app_cli.o(.text.cli_getber) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[4]">cli_getchannel</a> from app_cli.o(.text.cli_getchannel) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[e]">cli_getctune</a> from app_cli.o(.text.cli_getctune) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[d]">cli_getfreqoffset</a> from app_cli.o(.text.cli_getfreqoffset) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[12]">cli_getpactune</a> from app_cli.o(.text.cli_getpactune) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[6]">cli_getpower</a> from app_cli.o(.text.cli_getpower) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[8]">cli_getpowerlevel</a> from app_cli.o(.text.cli_getpowerlevel) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[a]">cli_getrssi</a> from app_cli.o(.text.cli_getrssi) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[b]">cli_getrssioffset</a> from app_cli.o(.text.cli_getrssioffset) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[19]">cli_getrxcount</a> from app_cli.o(.text.cli_getrxcount) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[3]">cli_getver</a> from app_cli.o(.text.cli_getver) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1d]">cli_getvt</a> from app_cli.o(.text.cli_getvt) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1]">cli_info</a> from app_cli.o(.text.cli_info) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[2]">cli_printmode</a> from app_cli.o(.text.cli_printmode) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[0]">cli_reset</a> from app_cli.o(.text.cli_reset) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[15]">cli_sendburst</a> from app_cli.o(.text.cli_sendburst) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[5]">cli_setchannel</a> from app_cli.o(.text.cli_setchannel) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[f]">cli_setctune</a> from app_cli.o(.text.cli_setctune) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1e]">cli_setem</a> from app_cli.o(.text.cli_setem) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[13]">cli_setpactune</a> from app_cli.o(.text.cli_setpactune) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[7]">cli_setpower</a> from app_cli.o(.text.cli_setpower) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[9]">cli_setpowerlevel</a> from app_cli.o(.text.cli_setpowerlevel) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[c]">cli_setrssioffset</a> from app_cli.o(.text.cli_setrssioffset) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1a]">cli_startber</a> from app_cli.o(.text.cli_startber) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[17]">cli_startrxcount</a> from app_cli.o(.text.cli_startrxcount) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[1b]">cli_stopber</a> from app_cli.o(.text.cli_stopber) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[18]">cli_stoprxcount</a> from app_cli.o(.text.cli_stoprxcount) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[11]">cli_storectune</a> from app_cli.o(.text.cli_storectune) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[14]">cli_storepactune</a> from app_cli.o(.text.cli_storepactune) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[16]">cli_txstream</a> from app_cli.o(.text.cli_txstream) referenced 2 times from app_cli.o(.data.commands)
 <LI><a href="#[51]">errataCallback</a> from tempdrv.o(.text.errataCallback) referenced 2 times from tempdrv.o(.text.TEMPDRV_Init)
 <LI><a href="#[4f]">fputc</a> from fputc.o(i.fputc) referenced from _printf_char_file.o(.text)
 <LI><a href="#[27]">sl_app_properties</a> from startup_efr32fg1v.o(.text) referenced from startup_efr32fg1v.o(RESET)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[4d]"></a>__main</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, __main.o(!!!main))
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(.text)
</UL>
<P><STRONG><a name="[52]"></a>__scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>

<P><STRONG><a name="[54]"></a>__scatterload_rt2</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry
</UL>

<P><STRONG><a name="[132]"></a>__scatterload_rt2_thumb_only</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[133]"></a>__scatterload_null</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __scatter.o(!!!scatter), UNUSED)

<P><STRONG><a name="[134]"></a>__decompress</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[135]"></a>__decompress1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(!!dczerorl2), UNUSED)

<P><STRONG><a name="[136]"></a>__scatterload_zeroinit</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, __scatter_zi.o(!!handler_zi), UNUSED)

<P><STRONG><a name="[55]"></a>_printf_f</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_f.o(.ARM.Collect$$_printf_percent$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 324 + Unknown Stack Size
<LI>Call Chain = _printf_f &rArr; _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[7d]"></a>_printf_percent</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent.o(.ARM.Collect$$_printf_percent$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[137]"></a>_printf_ll</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_ll.o(.ARM.Collect$$_printf_percent$$00000007))

<P><STRONG><a name="[57]"></a>_printf_d</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_d.o(.ARM.Collect$$_printf_percent$$00000009))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = _printf_d &rArr; _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[59]"></a>_printf_llx</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_llx.o(.ARM.Collect$$_printf_percent$$00000011))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = _printf_llx &rArr; _printf_ll_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
</UL>

<P><STRONG><a name="[5b]"></a>_printf_s</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_s.o(.ARM.Collect$$_printf_percent$$00000014))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _printf_s &rArr; _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
</UL>

<P><STRONG><a name="[138]"></a>_printf_percent_end</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, _printf_percent_end.o(.ARM.Collect$$_printf_percent$$00000017))

<P><STRONG><a name="[6d]"></a>__rt_lib_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit.o(.ARM.Collect$$libinit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_li
</UL>

<P><STRONG><a name="[5d]"></a>__rt_lib_init_fp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000001))
<BR><BR>[Calls]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_init
</UL>

<P><STRONG><a name="[5f]"></a>__rt_lib_init_heap_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000005))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_heap_2 &rArr; _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[139]"></a>__rt_lib_init_preinit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000004))

<P><STRONG><a name="[13a]"></a>__rt_lib_init_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000A))

<P><STRONG><a name="[61]"></a>__rt_lib_init_lc_common</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000F))
<BR><BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>

<P><STRONG><a name="[13b]"></a>__rt_lib_init_rand_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000E))

<P><STRONG><a name="[13c]"></a>__rt_lib_init_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000000C))

<P><STRONG><a name="[13d]"></a>__rt_lib_init_lc_collate_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000011))

<P><STRONG><a name="[63]"></a>__rt_lib_init_lc_ctype_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000012))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_ctype_2 &rArr; _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[13e]"></a>__rt_lib_init_lc_ctype_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000013))

<P><STRONG><a name="[13f]"></a>__rt_lib_init_lc_monetary_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000015))

<P><STRONG><a name="[64]"></a>__rt_lib_init_lc_numeric_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000016))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_lc_numeric_2 &rArr; _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
</UL>

<P><STRONG><a name="[140]"></a>__rt_lib_init_atexit_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001B))

<P><STRONG><a name="[141]"></a>__rt_lib_init_clock_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000021))

<P><STRONG><a name="[142]"></a>__rt_lib_init_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001F))

<P><STRONG><a name="[143]"></a>__rt_lib_init_getenv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000023))

<P><STRONG><a name="[144]"></a>__rt_lib_init_lc_numeric_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000017))

<P><STRONG><a name="[145]"></a>__rt_lib_init_lc_time_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000019))

<P><STRONG><a name="[146]"></a>__rt_lib_init_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000001D))

<P><STRONG><a name="[66]"></a>__rt_lib_init_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000024))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = __rt_lib_init_stdio_2 &rArr; _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[147]"></a>__rt_lib_init_alloca_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002E))

<P><STRONG><a name="[148]"></a>__rt_lib_init_argv_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$0000002C))

<P><STRONG><a name="[149]"></a>__rt_lib_init_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000032))

<P><STRONG><a name="[14a]"></a>__rt_lib_init_exceptions_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000030))

<P><STRONG><a name="[14b]"></a>__rt_lib_init_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000033))

<P><STRONG><a name="[14c]"></a>__rt_lib_init_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libinit2.o(.ARM.Collect$$libinit$$00000025))

<P><STRONG><a name="[72]"></a>__rt_lib_shutdown</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown.o(.ARM.Collect$$libshutdown$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_ls
</UL>

<P><STRONG><a name="[14d]"></a>__rt_lib_shutdown_cpp_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000002))

<P><STRONG><a name="[68]"></a>__rt_lib_shutdown_stdio_2</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000003))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = __rt_lib_shutdown_stdio_2 &rArr; _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[14e]"></a>__rt_lib_shutdown_fp_trap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000007))

<P><STRONG><a name="[14f]"></a>__rt_lib_shutdown_heap_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000F))

<P><STRONG><a name="[150]"></a>__rt_lib_shutdown_return</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000010))

<P><STRONG><a name="[151]"></a>__rt_lib_shutdown_signal_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000A))

<P><STRONG><a name="[152]"></a>__rt_lib_shutdown_stdio_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$00000004))

<P><STRONG><a name="[153]"></a>__rt_lib_shutdown_user_alloc_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, libshutdown2.o(.ARM.Collect$$libshutdown$$0000000C))

<P><STRONG><a name="[53]"></a>__rt_entry</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry.o(.ARM.Collect$$rtentry$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload_rt2
</UL>

<P><STRONG><a name="[154]"></a>__rt_entry_presh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000002))

<P><STRONG><a name="[6a]"></a>__rt_entry_sh</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry4.o(.ARM.Collect$$rtentry$$00000004))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = __rt_entry_sh &rArr; __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[6c]"></a>__rt_entry_li</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000A))
<BR><BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init
</UL>

<P><STRONG><a name="[155]"></a>__rt_entry_postsh_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$00000009))

<P><STRONG><a name="[6e]"></a>__rt_entry_main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000D))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = __rt_entry_main &rArr; main &rArr; process_cli &rArr; ciProcessInput &rArr; ciPrintHelp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[156]"></a>__rt_entry_postli_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __rtentry2.o(.ARM.Collect$$rtentry$$0000000C))

<P><STRONG><a name="[b9]"></a>__rt_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit.o(.ARM.Collect$$rtexit$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;exit
</UL>

<P><STRONG><a name="[71]"></a>__rt_exit_ls</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000003))
<BR><BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown
</UL>

<P><STRONG><a name="[157]"></a>__rt_exit_prels_1</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000002))

<P><STRONG><a name="[73]"></a>__rt_exit_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rtexit2.o(.ARM.Collect$$rtexit$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>

<P><STRONG><a name="[1f]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NMI_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[27]"></a>sl_app_properties</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[21]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>MemManage_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MemManage_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[23]"></a>BusFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BusFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[24]"></a>UsageFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UsageFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[25]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SVC_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[26]"></a>DebugMon_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DebugMon_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[28]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PendSV_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[29]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[37]"></a>ACMP0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ACMP0_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[41]"></a>CMU_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[49]"></a>CRYOTIMER_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[43]"></a>CRYPTO_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[4b]"></a>FPUEH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[33]"></a>GPIO_EVEN_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[3b]"></a>GPIO_ODD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[3a]"></a>I2C0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[39]"></a>IDAC0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[32]"></a>LDMA_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[3f]"></a>LEUART0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[42]"></a>MSC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[40]"></a>PCNT0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[47]"></a>RTCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[48]"></a>SYNTH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[34]"></a>TIMER0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[3c]"></a>TIMER1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>USART0_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[3d]"></a>USART1_RX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[3e]"></a>USART1_TX_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[2c]"></a>WDOG0_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[b0]"></a>__user_initial_stackheap</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, startup_efr32fg1v.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[81]"></a>__aeabi_errno_addr</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[158]"></a>__errno$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[159]"></a>__rt_errno_addr$intlibspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_errno_addr_intlibspace.o(.text), UNUSED)

<P><STRONG><a name="[e0]"></a>__aeabi_uldivmod</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, lludivv7m.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxWarmTimeSet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToTxTimeSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToRxTimeSet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToRxSearchTimeSet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SeqInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxWarmTimeSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxToTxTimeSet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxSearchTimeSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYNTH_Config
</UL>

<P><STRONG><a name="[15a]"></a>_ll_udiv</STRONG> (Thumb, 240 bytes, Stack size 48 bytes, lludivv7m.o(.text), UNUSED)

<P><STRONG><a name="[75]"></a>__2printf</STRONG> (Thumb, 20 bytes, Stack size 24 bytes, noretval__2printf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storepactune
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storectune
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setrssioffset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpowerlevel
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpower
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpactune
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setctune
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setchannel
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_info
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getvt
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getver
<LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getpactune
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getctune
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciErrorCallback
</UL>

<P><STRONG><a name="[78]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[79]"></a>_printf_post_padding</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, _printf_pad.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>

<P><STRONG><a name="[77]"></a>_printf_str</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, _printf_str.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[58]"></a>_printf_int_dec</STRONG> (Thumb, 104 bytes, Stack size 24 bytes, _printf_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = _printf_int_dec &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_d
</UL>

<P><STRONG><a name="[5a]"></a>_printf_ll_hex</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, _printf_hex_ll.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _printf_ll_hex &rArr; _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_common
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_llx
</UL>

<P><STRONG><a name="[15b]"></a>_printf_longlong_hex</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, _printf_hex_ll.o(.text), UNUSED)

<P><STRONG><a name="[7b]"></a>__printf</STRONG> (Thumb, 352 bytes, Stack size 32 bytes, __printf_ss_wp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32 + Unknown Stack Size
<LI>Call Chain = __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_percent
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_is_digit
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>

<P><STRONG><a name="[7e]"></a>strtol</STRONG> (Thumb, 112 bytes, Stack size 32 bytes, strtol.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetSigned
</UL>

<P><STRONG><a name="[82]"></a>strtoul</STRONG> (Thumb, 114 bytes, Stack size 40 bytes, strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
</UL>

<P><STRONG><a name="[83]"></a>puts</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, puts.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[18]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_stoprxcount
<LI><a href="#[1b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_stopber
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_startrxcount
<LI><a href="#[1a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_startber
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setrssioffset
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpowerlevel
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpower
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setem
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setchannel
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_sendburst
<LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_printmode
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_info
<LI><a href="#[19]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getrxcount
<LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getrssioffset
<LI><a href="#[a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getrssi
<LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getpowerlevel
<LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getpower
<LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getfreqoffset
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getchannel
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getber
<LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_calctune
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciErrorCallback
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9c]"></a>setvbuf</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, setvbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[108]"></a>strchr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, strchr.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[107]"></a>strcspn</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, strcspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strcspn
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[106]"></a>strspn</STRONG> (Thumb, 28 bytes, Stack size 12 bytes, strspn.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = strspn
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[84]"></a>strcasecmp</STRONG> (Thumb, 42 bytes, Stack size 24 bytes, strcasecmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = strcasecmp &rArr; tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[104]"></a>strlen</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, strlen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
</UL>

<P><STRONG><a name="[89]"></a>__aeabi_memcpy</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SeqInit
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[86]"></a>__rt_memcpy</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, rt_memcpy_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[15c]"></a>_memcpy_lastbytes</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_v6.o(.text), UNUSED)

<P><STRONG><a name="[109]"></a>__aeabi_memmove</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[88]"></a>__rt_memmove</STRONG> (Thumb, 132 bytes, Stack size 0 bytes, rt_memmove_v6.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__memmove_aligned
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>

<P><STRONG><a name="[15d]"></a>__memmove_lastfew</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_v6.o(.text), UNUSED)

<P><STRONG><a name="[99]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SeqInit
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[fa]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_Init
</UL>

<P><STRONG><a name="[15e]"></a>__rt_memclr_w</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[15f]"></a>_memset_w</STRONG> (Thumb, 74 bytes, Stack size 4 bytes, rt_memclr_w.o(.text), UNUSED)

<P><STRONG><a name="[fe]"></a>strcmp</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, strcmpv7em.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_numeric
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_get_lc_ctype
</UL>

<P><STRONG><a name="[160]"></a>__use_two_region_memory</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[161]"></a>__rt_heap_escrow</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[162]"></a>__rt_heap_expand</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, heapauxi.o(.text), UNUSED)

<P><STRONG><a name="[163]"></a>__user_libspace</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[af]"></a>__user_perproc_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_setup_stackheap
</UL>

<P><STRONG><a name="[164]"></a>__user_perthread_libspace</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, libspace.o(.text), UNUSED)

<P><STRONG><a name="[7f]"></a>__rt_ctype_table</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, rt_ctype_table.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tolower
</UL>

<P><STRONG><a name="[85]"></a>tolower</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, tolower.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = tolower &rArr; __rt_ctype_table
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
</UL>

<P><STRONG><a name="[7a]"></a>_printf_int_common</STRONG> (Thumb, 178 bytes, Stack size 32 bytes, _printf_intcommon.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = _printf_int_common &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_ll_hex
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_int_dec
</UL>

<P><STRONG><a name="[91]"></a>_printf_fp_dec_real</STRONG> (Thumb, 620 bytes, Stack size 104 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_infnan
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_locale
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec
</UL>

<P><STRONG><a name="[94]"></a>_printf_cs_common</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_str
</UL>
<BR>[Called By]<UL><LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_string
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char
</UL>

<P><STRONG><a name="[95]"></a>_printf_char</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, _printf_char.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>

<P><STRONG><a name="[5c]"></a>_printf_string</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, _printf_char.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_string &rArr; _printf_cs_common &rArr; _printf_str &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_cs_common
</UL>
<BR>[Called By]<UL><LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_s
</UL>

<P><STRONG><a name="[76]"></a>_printf_char_file</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, _printf_char_file.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112 + Unknown Stack Size
<LI>Call Chain = _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ferror
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_common
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>

<P><STRONG><a name="[80]"></a>_strtoul</STRONG> (Thumb, 158 bytes, Stack size 40 bytes, _strtoul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_chval
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>

<P><STRONG><a name="[67]"></a>_initio</STRONG> (Thumb, 210 bytes, Stack size 8 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 240 + Unknown Stack Size
<LI>Call Chain = _initio &rArr; freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_stdio_2
</UL>

<P><STRONG><a name="[69]"></a>_terminateio</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, initio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 224 + Unknown Stack Size
<LI>Call Chain = _terminateio &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_shutdown_stdio_2
</UL>

<P><STRONG><a name="[87]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove_w
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memcpy
</UL>

<P><STRONG><a name="[165]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[166]"></a>__rt_memcpy_w</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[167]"></a>_memcpy_lastbytes_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memcpy_w.o(.text), UNUSED)

<P><STRONG><a name="[168]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[169]"></a>__aeabi_memmove8</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[9f]"></a>__rt_memmove_w</STRONG> (Thumb, 122 bytes, Stack size 8 bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>

<P><STRONG><a name="[8a]"></a>__memmove_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_memmove
</UL>

<P><STRONG><a name="[16a]"></a>__memmove_lastfew_aligned</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, rt_memmove_w.o(.text), UNUSED)

<P><STRONG><a name="[62]"></a>__rt_locale</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_locale_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_common
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_ctype_table
</UL>

<P><STRONG><a name="[9e]"></a>free</STRONG> (Thumb, 78 bytes, Stack size 16 bytes, h1_free.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = free
</UL>
<BR>[Calls]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[90]"></a>_ll_udiv10</STRONG> (Thumb, 138 bytes, Stack size 12 bytes, lludiv10.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[96]"></a>_printf_char_common</STRONG> (Thumb, 32 bytes, Stack size 64 bytes, _printf_char_common.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 96 + Unknown Stack Size
<LI>Call Chain = _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[93]"></a>_printf_fp_infnan</STRONG> (Thumb, 112 bytes, Stack size 24 bytes, _printf_fp_infnan.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _printf_fp_infnan &rArr; _printf_post_padding
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[98]"></a>_chval</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, _chval.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_strtoul
</UL>

<P><STRONG><a name="[8c]"></a>_btod_etento</STRONG> (Thumb, 224 bytes, Stack size 72 bytes, bigflt0.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[97]"></a>ferror</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, ferror.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_char_file
</UL>

<P><STRONG><a name="[a1]"></a>__flsbuf</STRONG> (Thumb, 470 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[12e]"></a>__flsbuf_byte</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[16b]"></a>__flsbuf_wide</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, flsbuf.o(.text), UNUSED)

<P><STRONG><a name="[9a]"></a>freopen</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, fopen.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 232 + Unknown Stack Size
<LI>Call Chain = freopen &rArr; _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_open
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[aa]"></a>fopen</STRONG> (Thumb, 74 bytes, Stack size 24 bytes, fopen.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>

<P><STRONG><a name="[9d]"></a>_fclose_internal</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, fclose.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 208 + Unknown Stack Size
<LI>Call Chain = _fclose_internal &rArr; _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_close
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_terminateio
</UL>

<P><STRONG><a name="[16c]"></a>fclose</STRONG> (Thumb, 0 bytes, Stack size 32 bytes, fclose.o(.text), UNUSED)

<P><STRONG><a name="[9b]"></a>__rt_SIGRTRED</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTRED &rArr; __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_initio
</UL>

<P><STRONG><a name="[6b]"></a>__user_setup_stackheap</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, sys_stackheap_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __user_setup_stackheap
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_initial_stackheap
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__user_perproc_libspace
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_sh
</UL>

<P><STRONG><a name="[a0]"></a>__rt_heap_descriptor</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, rt_heap_descriptor_intlibspace.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>

<P><STRONG><a name="[16d]"></a>__use_no_heap</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[16e]"></a>__heap$guard</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, hguard.o(.text), UNUSED)

<P><STRONG><a name="[16f]"></a>_terminate_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[170]"></a>_init_user_alloc</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)

<P><STRONG><a name="[b1]"></a>__Heap_Full</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
</UL>

<P><STRONG><a name="[b3]"></a>__Heap_Broken</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, init_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[60]"></a>_init_alloc</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, init_alloc.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = _init_alloc &rArr; __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_ProvideMemory
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Initialize
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_heap_2
</UL>

<P><STRONG><a name="[a6]"></a>malloc</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, h1_alloc.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_heap_descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fopen
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[a9]"></a>_fseek</STRONG> (Thumb, 242 bytes, Stack size 24 bytes, fseek.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = _fseek &rArr; _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_istty
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_flen
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ftell_internal
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[171]"></a>fseek</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, fseek.o(.text), UNUSED)

<P><STRONG><a name="[a3]"></a>_seterr</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stdio.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[a7]"></a>_writebuf</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_seek
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_seterr
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[ab]"></a>_fflush</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, stdio.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = _fflush &rArr; _writebuf &rArr; _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_deferredlazyseek
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[a2]"></a>_deferredlazyseek</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, stdio.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fflush
</UL>
<BR>[Called By]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[70]"></a>exit</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, exit.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = exit
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[ae]"></a>__sig_exit</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, defsig_exit.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_exit
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[ad]"></a>__rt_SIGRTRED_inner</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtred_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTRED_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED
</UL>

<P><STRONG><a name="[74]"></a>_sys_exit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sys_exit.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_exit_exit
</UL>

<P><STRONG><a name="[b5]"></a>__Heap_Initialize</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, h1_init.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
</UL>

<P><STRONG><a name="[172]"></a>_maybe_terminate_alloc</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, maybetermalloc1.o(.text), UNUSED)

<P><STRONG><a name="[173]"></a>__Heap_DescSize</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, h1_init.o(.text), UNUSED)

<P><STRONG><a name="[b2]"></a>__Heap_ProvideMemory</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, h1_extend.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __Heap_ProvideMemory &rArr; free
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Full
</UL>

<P><STRONG><a name="[b6]"></a>_ftell_internal</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, ftell.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ftell_internal
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
</UL>

<P><STRONG><a name="[174]"></a>ftell</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, ftell.o(.text), UNUSED)

<P><STRONG><a name="[ba]"></a>__default_signal_display</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, defsig_general.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTRED_inner
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>

<P><STRONG><a name="[b4]"></a>__rt_SIGRTMEM</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, defsig_rtmem_outer.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = __rt_SIGRTMEM &rArr; __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__sig_exit
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM_inner
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_init_alloc
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__Heap_Broken
</UL>

<P><STRONG><a name="[bb]"></a>_ttywrch</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, sys_wrch.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _ttywrch
</UL>
<BR>[Called By]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>

<P><STRONG><a name="[175]"></a>__I$use$semihosting</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[176]"></a>__use_no_semihosting_swi</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, use_no_semi.o(.text), UNUSED)

<P><STRONG><a name="[bc]"></a>__rt_SIGRTMEM_inner</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, defsig_rtmem_inner.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = __rt_SIGRTMEM_inner &rArr; __default_signal_display &rArr; _ttywrch
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__default_signal_display
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_SIGRTMEM
</UL>

<P><STRONG><a name="[177]"></a>__semihosting_library_function</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, indicate_semi.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>ADC0_IRQHandler</STRONG> (Thumb, 708 bytes, Stack size 24 bytes, adc.o(.text.ADC0_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = ADC0_IRQHandler &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InitSingle
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[be]"></a>ADC_Init</STRONG> (Thumb, 210 bytes, Stack size 24 bytes, em_adc.o(.text.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Init &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[bd]"></a>ADC_InitSingle</STRONG> (Thumb, 210 bytes, Stack size 16 bytes, em_adc.o(.text.ADC_InitSingle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = ADC_InitSingle &rArr; ADC_LoadDevinfoCal
</UL>
<BR>[Calls]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_LoadDevinfoCal
</UL>
<BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC0_IRQHandler
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[c1]"></a>ADC_PrescaleCalc</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, em_adc.o(.text.ADC_PrescaleCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_PrescaleCalc &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[118]"></a>ADC_Reset</STRONG> (Thumb, 176 bytes, Stack size 8 bytes, em_adc.o(.text.ADC_Reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Reset
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[c2]"></a>ADC_TimebaseCalc</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, em_adc.o(.text.ADC_TimebaseCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = ADC_TimebaseCalc &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[45]"></a>AGC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text.AGC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[f6]"></a>BM_TxOff</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, radio_proc.o(.text.BM_TxOff))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_StopTx
</UL>

<P><STRONG><a name="[f3]"></a>BM_TxOn</STRONG> (Thumb, 94 bytes, Stack size 0 bytes, radio_proc.o(.text.BM_TxOn))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_StartStreamTx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_StartCwTx
</UL>

<P><STRONG><a name="[31]"></a>BUFC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text.BUFC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[119]"></a>CMU_AUXHFRCOBandGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, em_cmu.o(.text.CMU_AUXHFRCOBandGet))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[117]"></a>CMU_AUXHFRCOBandSet</STRONG> (Thumb, 350 bytes, Stack size 0 bytes, em_cmu.o(.text.CMU_AUXHFRCOBandSet))
<BR><BR>[Called By]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
</UL>

<P><STRONG><a name="[dc]"></a>CMU_ClockEnable</STRONG> (Thumb, 138 bytes, Stack size 16 bytes, em_cmu.o(.text.CMU_ClockEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLETIMER
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
</UL>

<P><STRONG><a name="[bf]"></a>CMU_ClockFreqGet</STRONG> (Thumb, 864 bytes, Stack size 8 bytes, em_cmu.o(.text.CMU_ClockFreqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemULFRCOClockGet
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFXOClockGet
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemLFRCOClockGet
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TimebaseCalc
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PrescaleCalc
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLETIMER
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
</UL>

<P><STRONG><a name="[c8]"></a>CMU_ClockSelectSet</STRONG> (Thumb, 704 bytes, Stack size 40 bytes, em_cmu.o(.text.CMU_ClockSelectSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = CMU_ClockSelectSet &rArr; CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemMaxCoreClockGet
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemCoreClockGet
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLETIMER
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_SetTune
</UL>

<P><STRONG><a name="[c9]"></a>CMU_OscillatorEnable</STRONG> (Thumb, 600 bytes, Stack size 16 bytes, em_cmu.o(.text.CMU_OscillatorEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = CMU_OscillatorEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_SetTune
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[cc]"></a>EMU_DCDCInit</STRONG> (Thumb, 598 bytes, Stack size 24 bytes, em_emu.o(.text.EMU_DCDCInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EMU_DCDCInit &rArr; EMU_DCDCOutputVoltageSet
</UL>
<BR>[Calls]<UL><LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOutputVoltageSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCOptimizeSlice
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_ChipRevisionGet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[cd]"></a>EMU_DCDCOptimizeSlice</STRONG> (Thumb, 242 bytes, Stack size 0 bytes, em_emu.o(.text.EMU_DCDCOptimizeSlice))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[cf]"></a>EMU_DCDCOutputVoltageSet</STRONG> (Thumb, 438 bytes, Stack size 36 bytes, em_emu.o(.text.EMU_DCDCOutputVoltageSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = EMU_DCDCOutputVoltageSet
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[2a]"></a>EMU_IRQHandler</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, tempdrv.o(.text.EMU_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = EMU_IRQHandler &rArr; TEMPDRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[fb]"></a>EMU_SetBiasMode</STRONG> (Thumb, 102 bytes, Stack size 0 bytes, em_emu.o(.text.EMU_SetBiasMode))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;errataCallback
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_Init
</UL>

<P><STRONG><a name="[2d]"></a>FRC_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text.FRC_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[2b]"></a>FRC_PRI_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text.FRC_PRI_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[d1]"></a>GENERIC_PHY_RadioEnable</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, generic_phy.o(.text.GENERIC_PHY_RadioEnable))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = GENERIC_PHY_RadioEnable &rArr; PROTIMER_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_RfHalIdleStart
</UL>

<P><STRONG><a name="[ef]"></a>GPIO_PinModeSet</STRONG> (Thumb, 158 bytes, Stack size 16 bytes, em_gpio.o(.text.GPIO_PinModeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
</UL>

<P><STRONG><a name="[44]"></a>LETIMER0_IRQHandler</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, adc.o(.text.LETIMER0_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[11c]"></a>LETIMER_CompareSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, em_letimer.o(.text.LETIMER_CompareSet))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLETIMER
</UL>

<P><STRONG><a name="[11d]"></a>LETIMER_Init</STRONG> (Thumb, 192 bytes, Stack size 16 bytes, em_letimer.o(.text.LETIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LETIMER_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLETIMER
</UL>

<P><STRONG><a name="[11b]"></a>LETIMER_RepeatSet</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, em_letimer.o(.text.LETIMER_RepeatSet))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLETIMER
</UL>

<P><STRONG><a name="[2e]"></a>MODEM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text.MODEM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[112]"></a>MSC_ErasePage</STRONG> (Thumb, 170 bytes, Stack size 0 bytes, em_msc.o(.text.MSC_ErasePage))
<BR><BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storepactune
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storectune
</UL>

<P><STRONG><a name="[128]"></a>MSC_WriteWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, em_msc.o(.text.MSC_WriteWord))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_userpage
</UL>

<P><STRONG><a name="[178]"></a>MSC_WriteWordI</STRONG> (Thumb, 488 bytes, Stack size 40 bytes, em_msc.o(.text.MSC_WriteWordI), UNUSED)

<P><STRONG><a name="[110]"></a>PA_CTuneSet</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, pa.o(.text.PA_CTuneSet))
<BR><BR>[Called By]<UL><LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpactune
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[d3]"></a>PA_OutputPowerSet</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, pa.o(.text.PA_OutputPowerSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PA_OutputPowerSet &rArr; PA_StripesAndSlicesCalc
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_StripesAndSlicesCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[125]"></a>PA_PowerLevelSet</STRONG> (Thumb, 376 bytes, Stack size 8 bytes, pa.o(.text.PA_PowerLevelSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PA_PowerLevelSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e2]"></a>PA_RampTimeGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, pa.o(.text.PA_RampTimeGet))
<BR><BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxWarmTimeSet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToTxTimeSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxToTxTimeSet
</UL>

<P><STRONG><a name="[d5]"></a>PA_RampTimeSet</STRONG> (Thumb, 322 bytes, Stack size 24 bytes, pa.o(.text.PA_RampTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = PA_RampTimeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_PA_Init
</UL>

<P><STRONG><a name="[d4]"></a>PA_StripesAndSlicesCalc</STRONG> (Thumb, 586 bytes, Stack size 16 bytes, pa.o(.text.PA_StripesAndSlicesCalc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = PA_StripesAndSlicesCalc
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_OutputPowerSet
</UL>

<P><STRONG><a name="[d6]"></a>PHY_UTILS_DelayUs</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, phy_utils.o(.text.PHY_UTILS_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = PHY_UTILS_DelayUs &rArr; PROTIMER_Init &rArr; CMU_ClockEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_DelayUs
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Start
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Init
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Stop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Reset
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_IsRunning
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
</UL>

<P><STRONG><a name="[123]"></a>PROTIMER_CCTimerCapture</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, protimer.o(.text.PROTIMER_CCTimerCapture))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[d2]"></a>PROTIMER_DelayUs</STRONG> (Thumb, 188 bytes, Stack size 8 bytes, protimer.o(.text.PROTIMER_DelayUs))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = PROTIMER_DelayUs
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERIC_PHY_RadioEnable
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UTILS_DelayUs
</UL>

<P><STRONG><a name="[46]"></a>PROTIMER_IRQHandler</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, radio.o(.text.PROTIMER_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[d8]"></a>PROTIMER_Init</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, protimer.o(.text.PROTIMER_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = PROTIMER_Init &rArr; CMU_ClockEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UTILS_DelayUs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[d7]"></a>PROTIMER_IsRunning</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, protimer.o(.text.PROTIMER_IsRunning))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UTILS_DelayUs
</UL>

<P><STRONG><a name="[db]"></a>PROTIMER_Reset</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, protimer.o(.text.PROTIMER_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UTILS_DelayUs
</UL>

<P><STRONG><a name="[d9]"></a>PROTIMER_Start</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, protimer.o(.text.PROTIMER_Start))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UTILS_DelayUs
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[da]"></a>PROTIMER_Stop</STRONG> (Thumb, 44 bytes, Stack size 0 bytes, protimer.o(.text.PROTIMER_Stop))
<BR><BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UTILS_DelayUs
</UL>

<P><STRONG><a name="[30]"></a>RAC_RSM_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text.RAC_RSM_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[2f]"></a>RAC_SEQ_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, radio.o(.text.RAC_SEQ_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[dd]"></a>RADIOCMU_ClockFreqGet</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, radio_cmu.o(.text.RADIOCMU_ClockFreqGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RADIOCMU_ClockFreqGet &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFClockGet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxWarmTimeSet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToTxTimeSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToRxTimeSet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToRxSearchTimeSet
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SeqInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxWarmTimeSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxToTxTimeSet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxSearchTimeSet
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Init
</UL>

<P><STRONG><a name="[120]"></a>RADIO_BUFCClear</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, radio.o(.text.RADIO_BUFCClear))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[122]"></a>RADIO_DccalEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio.o(.text.RADIO_DccalEnable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[11f]"></a>RADIO_FrameControlDescrBufferIdSet</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, radio.o(.text.RADIO_FrameControlDescrBufferIdSet))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[de]"></a>RADIO_PA_Init</STRONG> (Thumb, 230 bytes, Stack size 16 bytes, pa.o(.text.RADIO_PA_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = RADIO_PA_Init &rArr; PA_RampTimeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_RampTimeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[121]"></a>RADIO_RXBufferDisableThrInt</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, radio.o(.text.RADIO_RXBufferDisableThrInt))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[df]"></a>RADIO_RxSearchTimeSet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, radio.o(.text.RADIO_RxSearchTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_RxSearchTimeSet &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e1]"></a>RADIO_RxToTxTimeSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, radio.o(.text.RADIO_RxToTxTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RADIO_RxToTxTimeSet &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_RampTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e3]"></a>RADIO_RxWarmTimeSet</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, radio.o(.text.RADIO_RxWarmTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_RxWarmTimeSet &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e4]"></a>RADIO_SeqInit</STRONG> (Thumb, 160 bytes, Stack size 24 bytes, radio.o(.text.RADIO_SeqInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72 + Unknown Stack Size
<LI>Call Chain = RADIO_SeqInit &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e5]"></a>RADIO_SetAndForgetWrite</STRONG> (Thumb, 122 bytes, Stack size 24 bytes, radio.o(.text.RADIO_SetAndForgetWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RADIO_SetAndForgetWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_ChipRevisionGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e6]"></a>RADIO_TxToRxSearchTimeSet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, radio.o(.text.RADIO_TxToRxSearchTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_TxToRxSearchTimeSet &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e7]"></a>RADIO_TxToRxTimeSet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, radio.o(.text.RADIO_TxToRxTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = RADIO_TxToRxTimeSet &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e8]"></a>RADIO_TxToTxTimeSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, radio.o(.text.RADIO_TxToTxTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RADIO_TxToTxTimeSet &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_RampTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[e9]"></a>RADIO_TxWarmTimeSet</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, radio.o(.text.RADIO_TxWarmTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = RADIO_TxWarmTimeSet &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_RampTimeGet
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[10a]"></a>RAIL_GetTune</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, phy.o(.text.RAIL_GetTune))
<BR><BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storectune
<LI><a href="#[e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getctune
</UL>

<P><STRONG><a name="[ea]"></a>RAIL_RfHalIdleStart</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, rail_rf_hal.o(.text.RAIL_RfHalIdleStart))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RAIL_RfHalIdleStart &rArr; GENERIC_PHY_RadioEnable &rArr; PROTIMER_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GENERIC_PHY_RadioEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_RfIdle
</UL>

<P><STRONG><a name="[eb]"></a>RAIL_RfIdle</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, rail_rf.o(.text.RAIL_RfIdle))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = RAIL_RfIdle &rArr; RAIL_RfHalIdleStart &rArr; GENERIC_PHY_RadioEnable &rArr; PROTIMER_DelayUs
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_RfHalIdleStart
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setctune
</UL>

<P><STRONG><a name="[ec]"></a>RAIL_SetTune</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, phy.o(.text.RAIL_SetTune))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = RAIL_SetTune &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_OscillatorEnable
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>
<BR>[Called By]<UL><LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setctune
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ed]"></a>RETARGET_ReadChar</STRONG> (Thumb, 130 bytes, Stack size 8 bytes, retargetserial.o(.text.RETARGET_ReadChar))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = RETARGET_ReadChar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cli
</UL>

<P><STRONG><a name="[ee]"></a>RETARGET_SerialInit</STRONG> (Thumb, 244 bytes, Stack size 56 bytes, retargetserial.o(.text.RETARGET_SerialInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_InitAsync
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Enable
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setvbuf
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_ReadChar
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4a]"></a>RFSENSE_IRQHandler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, rfsense.o(.text.RFSENSE_IRQHandler))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[114]"></a>RFTEST_RestoreRadioConfiguration</STRONG> (Thumb, 150 bytes, Stack size 0 bytes, rf_test.o(.text.RFTEST_RestoreRadioConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
</UL>

<P><STRONG><a name="[115]"></a>RFTEST_SaveRadioConfiguration</STRONG> (Thumb, 144 bytes, Stack size 0 bytes, rf_test.o(.text.RFTEST_SaveRadioConfiguration))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
</UL>

<P><STRONG><a name="[f2]"></a>RFTEST_StartCwTx</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, rf_test.o(.text.RFTEST_StartCwTx))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BM_TxOn
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
</UL>

<P><STRONG><a name="[f4]"></a>RFTEST_StartStreamTx</STRONG> (Thumb, 100 bytes, Stack size 0 bytes, rf_test.o(.text.RFTEST_StartStreamTx))
<BR><BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BM_TxOn
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
</UL>

<P><STRONG><a name="[f5]"></a>RFTEST_StopTx</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, rf_test.o(.text.RFTEST_StopTx))
<BR><BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BM_TxOff
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
</UL>

<P><STRONG><a name="[f7]"></a>SYNTH_Config</STRONG> (Thumb, 534 bytes, Stack size 40 bytes, synth.o(.text.SYNTH_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = SYNTH_Config &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemHFXOClockGet
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[124]"></a>SYNTH_DCDCRetimeEnable</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, synth.o(.text.SYNTH_DCDCRetimeEnable))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
</UL>

<P><STRONG><a name="[ce]"></a>SYSTEM_ChipRevisionGet</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, em_system.o(.text.SYSTEM_ChipRevisionGet))
<BR><BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetAndForgetWrite
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
</UL>

<P><STRONG><a name="[cb]"></a>SystemCoreClockGet</STRONG> (Thumb, 98 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemCoreClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[c3]"></a>SystemHFClockGet</STRONG> (Thumb, 76 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemHFClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIOCMU_ClockFreqGet
</UL>

<P><STRONG><a name="[c7]"></a>SystemHFXOClockGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemHFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYNTH_Config
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_RampTimeSet
</UL>

<P><STRONG><a name="[4c]"></a>SystemInit</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemInit))
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(.text)
</UL>
<P><STRONG><a name="[c4]"></a>SystemLFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemLFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[c5]"></a>SystemLFXOClockGet</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemLFXOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[ca]"></a>SystemMaxCoreClockGet</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemMaxCoreClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
</UL>

<P><STRONG><a name="[c6]"></a>SystemULFRCOClockGet</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, system_efr32fg1v.o(.text.SystemULFRCOClockGet))
<BR><BR>[Called By]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>

<P><STRONG><a name="[10b]"></a>TEMPDRV_GetTemp</STRONG> (Thumb, 52 bytes, Stack size 0 bytes, tempdrv.o(.text.TEMPDRV_GetTemp))
<BR><BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getvt
</UL>

<P><STRONG><a name="[d0]"></a>TEMPDRV_IRQHandler</STRONG> (Thumb, 178 bytes, Stack size 8 bytes, tempdrv.o(.text.TEMPDRV_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TEMPDRV_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateInterrupts
</UL>
<BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_IRQHandler
</UL>

<P><STRONG><a name="[f9]"></a>TEMPDRV_Init</STRONG> (Thumb, 466 bytes, Stack size 40 bytes, tempdrv.o(.text.TEMPDRV_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = TEMPDRV_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;updateInterrupts
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_SetBiasMode
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_ChipRevisionGet
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr8
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[35]"></a>USART0_RX_IRQHandler</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, retargetserial.o(.text.USART0_RX_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART0_RX_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_efr32fg1v.o(RESET)
</UL>
<P><STRONG><a name="[f1]"></a>USART_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, em_usart.o(.text.USART_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
</UL>

<P><STRONG><a name="[f0]"></a>USART_InitAsync</STRONG> (Thumb, 254 bytes, Stack size 24 bytes, em_usart.o(.text.USART_InitAsync))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
</UL>
<BR>[Called By]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
</UL>

<P><STRONG><a name="[fc]"></a>USART_Rx</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, em_usart.o(.text.USART_Rx))
<BR><BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Rx
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Rx
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART0_RX_IRQHandler
</UL>

<P><STRONG><a name="[fd]"></a>USART_Tx</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, em_usart.o(.text.USART_Tx))
<BR><BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
</UL>

<P><STRONG><a name="[ac]"></a>_sys_close</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_close))
<BR><BR>[Called By]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fclose_internal
</UL>

<P><STRONG><a name="[a4]"></a>_sys_flen</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_flen))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[a5]"></a>_sys_istty</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_istty))
<BR><BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fseek
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf
</UL>

<P><STRONG><a name="[a8]"></a>_sys_open</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, retarget_io.o(.text._sys_open))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _sys_open &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;freopen
</UL>

<P><STRONG><a name="[b7]"></a>_sys_seek</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, retarget_io.o(.text._sys_seek))
<BR><BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[b8]"></a>_sys_write</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, retarget_io.o(.text._sys_write))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = _sys_write &rArr; stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;stdout_putchar
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_writebuf
</UL>

<P><STRONG><a name="[100]"></a>ciErrorCallback</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, command_interpreter.o(.text.ciErrorCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = ciErrorCallback &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[101]"></a>ciGetSigned</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, command_interpreter.o(.text.ciGetSigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = ciGetSigned &rArr; strtol &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setrssioffset
<LI><a href="#[7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpower
</UL>

<P><STRONG><a name="[102]"></a>ciGetUnsigned</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, command_interpreter.o(.text.ciGetUnsigned))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
</UL>
<BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_txstream
<LI><a href="#[9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpowerlevel
<LI><a href="#[13]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setpactune
<LI><a href="#[f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setctune
<LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setchannel
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_printmode
</UL>

<P><STRONG><a name="[10e]"></a>ciInitState</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, command_interpreter.o(.text.ciInitState))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
</UL>

<P><STRONG><a name="[103]"></a>ciPrintHelp</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, command_interpreter.o(.text.ciPrintHelp))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = ciPrintHelp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>

<P><STRONG><a name="[105]"></a>ciProcessInput</STRONG> (Thumb, 1356 bytes, Stack size 128 bytes, command_interpreter.o(.text.ciProcessInput))
<BR><BR>[Stack]<UL><LI>Max Depth = 304 + Unknown Stack Size
<LI>Call Chain = ciProcessInput &rArr; ciPrintHelp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciPrintHelp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciErrorCallback
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtoul
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strtol
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_errno_addr
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strlen
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcasecmp
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strspn
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcspn
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strchr
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cli
</UL>

<P><STRONG><a name="[10]"></a>cli_calctune</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_calctune))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_calctune &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1c]"></a>cli_getber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_getber &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[4]"></a>cli_getchannel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getchannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_getchannel &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[e]"></a>cli_getctune</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getctune))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_getctune &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_GetTune
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[d]"></a>cli_getfreqoffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getfreqoffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_getfreqoffset &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[12]"></a>cli_getpactune</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getpactune))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cli_getpactune &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[6]"></a>cli_getpower</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_getpower &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[8]"></a>cli_getpowerlevel</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getpowerlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_getpowerlevel &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[a]"></a>cli_getrssi</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getrssi))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_getrssi &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[b]"></a>cli_getrssioffset</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, app_cli.o(.text.cli_getrssioffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = cli_getrssioffset &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[19]"></a>cli_getrxcount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getrxcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_getrxcount &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[3]"></a>cli_getver</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, app_cli.o(.text.cli_getver))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = cli_getver &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1d]"></a>cli_getvt</STRONG> (Thumb, 96 bytes, Stack size 40 bytes, app_cli.o(.text.cli_getvt))
<BR><BR>[Stack]<UL><LI>Max Depth = 176 + Unknown Stack Size
<LI>Call Chain = cli_getvt &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_GetTemp
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1]"></a>cli_info</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, app_cli.o(.text.cli_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_info &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[10d]"></a>cli_init</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, app_cli.o(.text.cli_init))
<BR><BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciInitState
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[2]"></a>cli_printmode</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_cli.o(.text.cli_printmode))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = cli_printmode &rArr; ciGetUnsigned &rArr; strtoul &rArr; _strtoul
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[0]"></a>cli_reset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, app_cli.o(.text.cli_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_reset &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__NVIC_SystemReset
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[15]"></a>cli_sendburst</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_sendburst))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_sendburst &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[5]"></a>cli_setchannel</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setchannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_setchannel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[f]"></a>cli_setctune</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setctune))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_setctune &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_RfIdle
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_SetTune
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1e]"></a>cli_setem</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_setem))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_setem &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[13]"></a>cli_setpactune</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, app_cli.o(.text.cli_setpactune))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cli_setpactune &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_CTuneSet
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[7]"></a>cli_setpower</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setpower))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_setpower &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetSigned
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[9]"></a>cli_setpowerlevel</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setpowerlevel))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_setpowerlevel &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[c]"></a>cli_setrssioffset</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, app_cli.o(.text.cli_setrssioffset))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_setrssioffset &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetSigned
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1a]"></a>cli_startber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_startber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_startber &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[17]"></a>cli_startrxcount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_startrxcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_startrxcount &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[1b]"></a>cli_stopber</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_stopber))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_stopber &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[18]"></a>cli_stoprxcount</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, app_cli.o(.text.cli_stoprxcount))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = cli_stoprxcount &rArr; puts &rArr; fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[11]"></a>cli_storectune</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, app_cli.o(.text.cli_storectune))
<BR><BR>[Stack]<UL><LI>Max Depth = 144 + Unknown Stack Size
<LI>Call Chain = cli_storectune &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_userpage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userpage
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_GetTune
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ErasePage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[14]"></a>cli_storepactune</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, app_cli.o(.text.cli_storepactune))
<BR><BR>[Stack]<UL><LI>Max Depth = 152 + Unknown Stack Size
<LI>Call Chain = cli_storepactune &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_userpage
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_userpage
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_ErasePage
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[16]"></a>cli_txstream</STRONG> (Thumb, 148 bytes, Stack size 8 bytes, app_cli.o(.text.cli_txstream))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = cli_txstream &rArr; SYNTH_Config &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYNTH_Config
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_StopTx
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_StartStreamTx
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_StartCwTx
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_SaveRadioConfiguration
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RFTEST_RestoreRadioConfiguration
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_RfIdle
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PHY_UTILS_DelayUs
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciGetUnsigned
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> app_cli.o(.data.commands)
</UL>
<P><STRONG><a name="[116]"></a>initADC</STRONG> (Thumb, 202 bytes, Stack size 24 bytes, adc.o(.text.initADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = initADC &rArr; ADC_Init &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_AUXHFRCOBandSet
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_AUXHFRCOBandGet
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_TimebaseCalc
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Reset
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_PrescaleCalc
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InitSingle
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11a]"></a>initLETIMER</STRONG> (Thumb, 180 bytes, Stack size 32 bytes, adc.o(.text.initLETIMER))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = initLETIMER &rArr; CMU_ClockSelectSet &rArr; CMU_OscillatorEnable
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_RepeatSet
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_Init
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LETIMER_CompareSet
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockFreqGet
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[11e]"></a>init_radio</STRONG> (Thumb, 1126 bytes, Stack size 48 bytes, radio_proc.o(.text.init_radio))
<BR><BR>[Stack]<UL><LI>Max Depth = 136 + Unknown Stack Size
<LI>Call Chain = init_radio &rArr; SYNTH_Config &rArr; __aeabi_uldivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYNTH_DCDCRetimeEnable
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxWarmTimeSet
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToTxTimeSet
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToRxTimeSet
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_TxToRxSearchTimeSet
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SetAndForgetWrite
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_SeqInit
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxWarmTimeSet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxToTxTimeSet
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RxSearchTimeSet
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_RXBufferDisableThrInt
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_PA_Init
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_FrameControlDescrBufferIdSet
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_DccalEnable
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RADIO_BUFCClear
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Start
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_Init
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PROTIMER_CCTimerCapture
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_PowerLevelSet
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_OutputPowerSet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYNTH_Config
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PA_CTuneSet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[126]"></a>leds_init</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, leds.o(.text.leds_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = leds_init &rArr; GPIO_PinModeSet
</UL>
<BR>[Calls]<UL><LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinModeSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>main</STRONG> (Thumb, 276 bytes, Stack size 16 bytes, main.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = main &rArr; process_cli &rArr; ciProcessInput &rArr; ciPrintHelp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;process_cli
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;leds_init
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_radio
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initLETIMER
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;initADC
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_init
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSTEM_ChipRevisionGet
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAIL_SetTune
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_DCDCInit
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockSelectSet
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CMU_ClockEnable
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_entry_main
</UL>

<P><STRONG><a name="[127]"></a>process_cli</STRONG> (Thumb, 46 bytes, Stack size 16 bytes, app_cli.o(.text.process_cli))
<BR><BR>[Stack]<UL><LI>Max Depth = 320 + Unknown Stack Size
<LI>Call Chain = process_cli &rArr; ciProcessInput &rArr; ciPrintHelp &rArr; __2printf &rArr; _printf_char_file &rArr; _printf_char_common &rArr; __printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_ReadChar
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ciProcessInput
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[111]"></a>read_userpage</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, mcu_memory.o(.text.read_userpage))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = read_userpage
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storepactune
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storectune
</UL>

<P><STRONG><a name="[ff]"></a>stdout_putchar</STRONG> (Thumb, 86 bytes, Stack size 24 bytes, retargetserial.o(.text.stdout_putchar))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = stdout_putchar &rArr; RETARGET_SerialInit &rArr; USART_InitAsync &rArr; CMU_ClockFreqGet
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Tx
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RETARGET_SerialInit
</UL>
<BR>[Called By]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_sys_write
</UL>

<P><STRONG><a name="[113]"></a>write_userpage</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, mcu_memory.o(.text.write_userpage))
<BR><BR>[Calls]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MSC_WriteWord
</UL>
<BR>[Called By]<UL><LI><a href="#[14]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storepactune
<LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_storectune
</UL>

<P><STRONG><a name="[8d]"></a>_btod_d2e</STRONG> (Thumb, 62 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e))
<BR><BR>[Calls]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>
<BR>[Called By]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12a]"></a>_d2e_denorm_low</STRONG> (Thumb, 70 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_denorm_low))
<BR><BR>[Called By]<UL><LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_norm_op1
</UL>

<P><STRONG><a name="[129]"></a>_d2e_norm_op1</STRONG> (Thumb, 96 bytes, Stack size 0 bytes, btod.o(CL$$btod_d2e_norm_op1))
<BR><BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_d2e_denorm_low
</UL>
<BR>[Called By]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
</UL>

<P><STRONG><a name="[12b]"></a>__btod_div_common</STRONG> (Thumb, 696 bytes, Stack size 24 bytes, btod.o(CL$$btod_div_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[12c]"></a>_e2e</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, btod.o(CL$$btod_e2e))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = _e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
</UL>

<P><STRONG><a name="[8e]"></a>_btod_ediv</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_ediv))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_ediv &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_div_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[8f]"></a>_btod_emul</STRONG> (Thumb, 42 bytes, Stack size 28 bytes, btod.o(CL$$btod_emul))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__btod_mult_common
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_e2e
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[12d]"></a>__btod_mult_common</STRONG> (Thumb, 580 bytes, Stack size 16 bytes, btod.o(CL$$btod_mult_common))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __btod_mult_common
</UL>
<BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
</UL>

<P><STRONG><a name="[92]"></a>__ARM_fpclassify</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_fpclassify
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[7c]"></a>_is_digit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, __printf_wp.o(i._is_digit))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__printf
</UL>

<P><STRONG><a name="[4f]"></a>fputc</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fputc.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = fputc &rArr; __flsbuf_byte
</UL>
<BR>[Calls]<UL><LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__flsbuf_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;puts
</UL>
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_file.o(.text)
</UL>
<P><STRONG><a name="[4e]"></a>_get_lc_ctype</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_ctype_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_ctype &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_ctype_2
</UL>
<BR>[Address Reference Count : 1]<UL><LI> rt_ctype_table.o(.text)
</UL>
<P><STRONG><a name="[65]"></a>_get_lc_numeric</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, lc_numeric_c.o(locale$$code))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = _get_lc_numeric &rArr; strcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_lc_numeric_2
</UL>

<P><STRONG><a name="[131]"></a>__fpl_dretinf</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, dretinf.o(x$fpl$dretinf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[10c]"></a>__aeabi_f2d</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_f2d
</UL>
<BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_setrssioffset
<LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_getvt
</UL>

<P><STRONG><a name="[12f]"></a>_f2d</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, f2d.o(x$fpl$f2d), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_fnaninf
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__fpl_dretinf
</UL>

<P><STRONG><a name="[130]"></a>__fpl_fnaninf</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, fnaninf.o(x$fpl$fnaninf), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_f2d
</UL>

<P><STRONG><a name="[5e]"></a>_fp_init</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, fpinit.o(x$fpl$fpinit))
<BR><BR>[Called By]<UL><LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__rt_lib_init_fp_1
</UL>

<P><STRONG><a name="[179]"></a>__fplib_config_fpu_vfp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[17a]"></a>__fplib_config_pureend_doubles</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, fpinit.o(x$fpl$fpinit), UNUSED)

<P><STRONG><a name="[56]"></a>_printf_fp_dec</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, printf1.o(x$fpl$printf1))
<BR><BR>[Stack]<UL><LI>Max Depth = 324<LI>Call Chain = _printf_fp_dec &rArr; _printf_fp_dec_real &rArr; _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_f
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[10f]"></a>__NVIC_SystemReset</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, app_cli.o(.text.__NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cli_reset
</UL>

<P><STRONG><a name="[c0]"></a>ADC_LoadDevinfoCal</STRONG> (Thumb, 250 bytes, Stack size 8 bytes, em_adc.o(.text.ADC_LoadDevinfoCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_LoadDevinfoCal
</UL>
<BR>[Called By]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_InitSingle
</UL>

<P><STRONG><a name="[51]"></a>errataCallback</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, tempdrv.o(.text.errataCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = errataCallback
</UL>
<BR>[Calls]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EMU_SetBiasMode
</UL>
<BR>[Address Reference Count : 1]<UL><LI> tempdrv.o(.text.TEMPDRV_Init)
</UL>
<P><STRONG><a name="[f8]"></a>updateInterrupts</STRONG> (Thumb, 448 bytes, Stack size 0 bytes, tempdrv.o(.text.updateInterrupts))
<BR><BR>[Called By]<UL><LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_IRQHandler
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TEMPDRV_Init
</UL>

<P><STRONG><a name="[8b]"></a>_fp_digits</STRONG> (Thumb, 432 bytes, Stack size 96 bytes, _printf_fp_dec.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 220<LI>Call Chain = _fp_digits &rArr; _btod_etento &rArr; _btod_emul &rArr; _e2e
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_emul
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_ediv
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_d2e
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_btod_etento
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_ll_udiv10
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_fp_dec_real
</UL>

<P><STRONG><a name="[50]"></a>_printf_input_char</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, _printf_char_common.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> _printf_char_common.o(.text)
</UL><P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
